pipeline {
  agent any
  environment {
      GOOGLE_CREDENTIALS = credentials('terraform-vault-sa-auth')
    }
    stages {

    stage('Use GKE Cluster Credentials') {
      steps {
        dir('1-gke-using-terraform') {
          sh 'echo $GOOGLE_CREDENTIALS | base64 -di > serviceaccount-auth.json'
          sh 'terraform init'
          sh 'gcloud auth activate-service-account --key-file=serviceaccount-auth.json'
          sh 'gcloud container clusters get-credentials $(terraform output -raw gke_cluster_name) --region $(terraform output -raw region)'
        }  
      }
    }

    stage('Create K8S secret') {
      steps {
        dir('1-gke-using-terraform') {
          sh 'kubectl create secret generic vault-sa-auth --from-file=serviceaccount-auth.json --dry-run -o yaml > serviceaccount-auth.yml'
          sh 'kubectl apply -f serviceaccount-auth.yml'
        }
      } 
    }

    stage('Helm Deploy') {
      steps {
        dir('2-vault-auto-unseal') {
          sh 'helm repo add hashicorp https://helm.releases.hashicorp.com'
          sh 'helm upgrade --install vault hashicorp/vault -f vault-values.yml'
        }
      }  
    }

    stage('Vault Status') {
      steps {
        dir('2-vault-auto-unseal') {
          script {
            try {
              sh 'sleep 60'
              sh 'kubectl exec vault-0 -- vault status'
            } catch (err) {
              echo err.getMessage()
              echo "Vault not initialized, continuing"
            }
          }  
        }
      }  
    }

    stage('Vault UI URL') {
      steps {
        dir('2-vault-auto-unseal') {
          sh 'echo "Vault UI URL --> http://$(kubectl get svc vault-ui -o jsonpath="{range .items[*]}{.status.loadBalancer.ingress[0].ip}"):8200/"'
        }
      }  
    }
  }
}